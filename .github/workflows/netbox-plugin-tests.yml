name: NetBox Plugin Tests

on:
  workflow_call:
    inputs:
      app-id:
        description: 'The GitHub App ID to use for checkout of private repositories'
        required: true
        type: string
      plugin-name:
        description: 'The name of the NetBox plugin, eg: netbox_secrets'
        required: true
        type: string
      plugin-configuration:
        description: 'Inner plugin config JSON (e.g. {"github_token":"..."}).'
        required: false
        type: string
        default: '{}'
      netbox-version:
        description: 'NetBox version to use, eg: v4.3.0'
        required: false
        default: 'v4.3.6'
        type: string
      python-version:
        description: 'Python version to use, eg: 3.12'
        required: false
        default: '3.12'
        type: string
      runs-on:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: 'ubuntu-22.04-sh'
    secrets:
      private-key:
        description: 'The private key for the GitHub App to use for checkout of private repositories'
        required: true

env:
  ACTIONS_WORKING_DIRECTORY: actions
  NETBOX_WORKING_DIRECTORY: netbox

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Pre-commit
    uses: Onemind-Services-LLC/actions/.github/workflows/pre-commit.yml@master
    with:
      runs-on: ${{ inputs.runs-on }}

  test:
    name: Run Tests
    runs-on: ${{ inputs.runs-on }}
    needs: lint

    services:
      redis:
        image: registry.onemindservices.com/docker.io/library/redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      postgres:
        image: registry.onemindservices.com/docker.io/library/postgres:17-alpine
        env:
          POSTGRES_USER: netbox
          POSTGRES_PASSWORD: netbox
          POSTGRES_DB: netbox
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Create App Token
        id: repo-token
        uses: Onemind-Services-LLC/actions/actions/create-repo-token@master
        with:
          app-id: ${{ inputs.app-id }}
          private-key: ${{ secrets.private-key }}
          owner: Onemind-Services-LLC

      - name: Checkout NetBox Repository
        uses: actions/checkout@v5
        with:
          repository: "netbox-community/netbox"
          path: netbox
          ref: ${{ inputs.netbox-version }}

      - name: Checkout Plugin Repository
        uses: actions/checkout@v5
        with:
          path: ${{ inputs.plugin-name }}

      - name: Checkout Actions Repository
        uses: actions/checkout@v5
        with:
          repository: "Onemind-Services-LLC/actions"
          path: ${{ env.ACTIONS_WORKING_DIRECTORY }}
          ref: master
          token: ${{ steps.repo-token.outputs.token }}

      - name: Setup NetBox Requirements
        uses: Onemind-Services-LLC/actions/actions/python-setup-install@master
        with:
          python-version: ${{ inputs.python-version }}
          working-directory: ${{ env.NETBOX_WORKING_DIRECTORY }}
          pre-install-commands: |
            sudo apt-get update && sudo apt-get install -y libpq-dev

      - name: Setup Plugin Requirements
        uses: Onemind-Services-LLC/actions/actions/python-setup-install@master
        with:
          python-version: ${{ inputs.python-version }}
          working-directory: ${{ inputs.plugin-name }}
          github-token: ${{ steps.repo-token.outputs.token }}
          extra-install-commands: |
            pip install -e .

      - name: Copy NetBox Test Configuration
        run: |
          cp -f "${{ env.ACTIONS_WORKING_DIRECTORY }}/assets/netbox-plugin-tests/configuration.py" \
            "${{ env.NETBOX_WORKING_DIRECTORY }}/netbox/netbox/configuration.py"

      - name: Add plugin to NetBox configuration
        env:
          CONF_PATH: ${{ env.NETBOX_WORKING_DIRECTORY }}/netbox/netbox/configuration.py
          PLUGIN_NAME: ${{ inputs.plugin-name }}
          PLUGIN_CONFIG: ${{ inputs.plugin-configuration }}
        run: |
          python - << 'PY'
          import json, os, sys

          conf_path = os.environ["CONF_PATH"]
          plugin_name = os.environ["PLUGIN_NAME"]
          raw = os.environ.get("PLUGIN_CONFIG", "{}")

          # Parse user-supplied JSON; fail fast on invalid JSON
          try:
              parsed = json.loads(raw) if raw.strip() else {}
          except json.JSONDecodeError as e:
              print(f"Invalid plugin-configuration JSON: {e}", file=sys.stderr)
              sys.exit(1)

          # Accept either full mapping {plugin_name: {...}} or inner config {...}
          if isinstance(parsed, dict) and plugin_name in parsed:
              config = parsed
          else:
              config = {plugin_name: parsed}

          # Write valid Python literals (not JSON) to configuration.py
          with open(conf_path, "a", encoding="utf-8") as f:
              f.write(f"PLUGINS = ['{plugin_name}']\n")
              f.write("PLUGINS_CONFIG = " + repr(config) + "\n")
          PY

      - name: Run Tests
        uses: Onemind-Services-LLC/actions/actions/django-test-runner@master
        with:
          working-directory: ${{ env.NETBOX_WORKING_DIRECTORY }}/netbox
          django-settings-module-key: NETBOX_CONFIGURATION
          django-settings-module: netbox.configuration
          test-args: ${{ inputs.plugin-name }}.tests --parallel
          coverage-report: true
          coverage-github-token: ${{ steps.repo-token.outputs.token }}
          coverage-pull-request-number: ${{ github.event.pull_request.number || '' }}
          verbosity: '3'
