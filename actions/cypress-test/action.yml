name: "Cypress Test"
description: "Run Cypress tests (component or e2e) with optional server start, waits, and artifact upload on failure"
inputs:
  node-version:
    description: Node.js version to use
    required: false
    default: '22.x'
  working-directory:
    description: Directory containing the project
    required: false
    default: '.'
  registry-url:
    description: Optional npm registry URL for scoped/private packages
    required: false
    default: ''
  registry-scope:
    description: Optional npm scope (e.g., '@your-scope') for auth
    required: false
    default: ''
  npm-token:
    description: NPM auth token for private registry access
    required: false
    default: ''
  browser:
    description: "Browser to run (chrome|edge|firefox)"
    required: true
  component:
    description: "Run in component test mode (false for e2e)"
    default: "true"
    required: false
  start:
    description: "Command to start the app/server for e2e"
    required: false
  wait-on:
    description: "URL(s) to wait on before running tests"
    required: false
  wait-on-timeout:
    description: "Timeout (seconds) for wait-on"
    required: false
    default: "300"
runs:
  using: "composite"
  steps:
    - name: Detect Package Manager
      id: pm
      uses: Onemind-Services-LLC/actions/actions/detect-package-manager@master
      with:
        working-directory: ${{ inputs.working-directory }}

    - name: Setup Node.js
      uses: Onemind-Services-LLC/actions/actions/node-install-build@master
      with:
        package-manager: ${{ steps.pm.outputs.package-manager }}
        node-version: ${{ inputs.node-version }}
        install: false
        build: false
        registry-url: ${{ inputs.registry-url }}
        registry-scope: ${{ inputs.registry-scope }}
        npm-token: ${{ inputs.npm-token }}

    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libglib2.0-0 libgconf-2-4 libatk1.0-0 libatk-bridge2.0-0 \
            libgdk-pixbuf2.0-0 libgtk-3-0 libgbm-dev libnss3-dev libxss-dev libasound2 xvfb fonts-liberation \
            libu2f-udev xdg-utils

    - id: setup-chrome
      uses: browser-actions/setup-chrome@b94431e051d1c52dcbe9a7092a4f10f827795416 # v2.1.0
      if: ${{ inputs.browser == 'chrome-for-testing' || inputs.browser == 'chrome' }}

    - name: Expose Chrome binary on PATH
      if: ${{ inputs.browser == 'chrome-for-testing' || inputs.browser == 'chrome' }}
      shell: bash
      run: |
        set -euo pipefail
        CHROME_PATH="${{ steps.setup-chrome.outputs.chrome-path }}"
        if [ -z "$CHROME_PATH" ]; then
          echo "::error::setup-chrome did not output chrome-path; cannot proceed"
          exit 1
        fi
        if [ ! -x "$CHROME_PATH" ]; then
          echo "::error::Chrome binary not executable or not found at $CHROME_PATH"
          exit 1
        fi
        echo "Linking $CHROME_PATH to /usr/local/bin/{chrome,google-chrome,google-chrome-stable}"
        sudo ln -sf "$CHROME_PATH" /usr/local/bin/chrome
        sudo ln -sf "$CHROME_PATH" /usr/local/bin/google-chrome
        sudo ln -sf "$CHROME_PATH" /usr/local/bin/google-chrome-stable
        which chrome || true
        chrome --version || true

    - id: setup-firefox
      uses: browser-actions/setup-firefox@5914774dda97099441f02628f8d46411fcfbd208 # v1.7.0
      if: ${{ inputs.browser == 'firefox' }}

    - name: Expose Firefox binary on PATH
      if: ${{ inputs.browser == 'firefox' }}
      shell: bash
      run: |
        set -euo pipefail
        FIREFOX_PATH="${{ steps.setup-firefox.outputs.firefox-path }}"
        if [ -z "$FIREFOX_PATH" ]; then
          echo "::error::setup-firefox did not output firefox-path; cannot proceed"
          exit 1
        fi
        if [ ! -x "$FIREFOX_PATH" ]; then
          echo "::error::Firefox binary not executable or not found at $FIREFOX_PATH"
          exit 1
        fi
        echo "Linking $FIREFOX_PATH to /usr/local/bin/firefox"
        sudo ln -sf "$FIREFOX_PATH" /usr/local/bin/firefox
        which firefox || true
        firefox --version || true

    - id: setup-edge
      uses: browser-actions/setup-edge@5a55d8fc0f012aa6e16b582df5bf9d6274bda7da # v1.1.1
      if: ${{ inputs.browser == 'edge' }}

    - name: Expose Edge binary on PATH
      if: ${{ inputs.browser == 'edge' }}
      shell: bash
      run: |
        set -euo pipefail
        EDGE_PATH="${{ steps.setup-edge.outputs.edge-path }}"
        if [ -z "$EDGE_PATH" ]; then
          echo "::error::setup-edge did not output edge-path; cannot proceed"
          exit 1
        fi
        if [ ! -x "$EDGE_PATH" ]; then
          echo "::error::Edge binary not executable or not found at $EDGE_PATH"
          exit 1
        fi
        echo "Linking $EDGE_PATH to /usr/local/bin/{edge,microsoft-edge,microsoft-edge-stable}"
        sudo ln -sf "$EDGE_PATH" /usr/local/bin/edge
        sudo ln -sf "$EDGE_PATH" /usr/local/bin/microsoft-edge
        sudo ln -sf "$EDGE_PATH" /usr/local/bin/microsoft-edge-stable
        which edge || true
        which microsoft-edge || true
        which microsoft-edge-stable || true
        edge --version || true
        microsoft-edge --version || true
        microsoft-edge-stable --version || true

    - name: Run Cypress tests
      uses: cypress-io/github-action@b8ba51a856ba5f4c15cf39007636d4ab04f23e3c # v6.10.2
      with:
        component: ${{ inputs.component }}
        install: true
        browser: ${{ inputs.browser == 'chrome' && 'chrome-for-testing' || inputs.browser }}
        start: ${{ inputs.start }}
        wait-on: ${{ inputs.wait-on }}
        wait-on-timeout: ${{ inputs.wait-on-timeout }}
        working-directory: ${{ inputs.working-directory }}
      env:
        FORCE_FIREFOX_CDP: ${{ inputs.browser == 'firefox' && '1' || '' }}

    - name: Upload screenshots on failure
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: cypress-screenshots-${{ inputs.browser }}
        path: cypress/screenshots
        if-no-files-found: ignore
