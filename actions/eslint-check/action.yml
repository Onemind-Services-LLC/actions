name: ESLint Check
description: Run ESLint and fail on any issues (warnings are errors).

inputs:
  node-version:
    description: Node.js version to use
    required: false
    default: '22.x'
  working-directory:
    description: Directory to run ESLint in
    required: false
    default: '.'
  config:
    description: Path to ESLint config file (e.g., eslint.config.mjs)
    required: false
    default: 'eslint.config.mjs'
  eslint-args:
    description: Additional ESLint args or target paths
    required: false
    default: '.'
  npm-token:
    description: NPM auth token for private registry access
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Detect Package Manager
      id: pm
      uses: Onemind-Services-LLC/actions/actions/detect-package-manager@master
      with:
        working-directory: ${{ inputs.working-directory }}

    - name: Setup Node
      uses: Onemind-Services-LLC/actions/actions/node-install-build@master
      with:
        package-manager: ${{ steps.pm.outputs.package-manager }}
        node-version: ${{ inputs.node-version }}
        working-directory: ${{ inputs.working-directory }}
        install: 'true'
        build: 'false'
        registry-scope: "@onemind-services-llc"
        registry-url: "https://npm.pkg.github.com"
        npm-token: ${{ steps.repo-token.outputs.token }}

    - name: Run ESLint
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        set -euo pipefail
        cfg='${{ inputs.config }}'
        extra_cfg=()
        if [[ -n "$cfg" ]]; then
          if [[ -f "$cfg" ]]; then
            extra_cfg=("--config" "$cfg")
          else
            echo "::notice::ESLint config '$cfg' not found in $PWD; running with ESLint defaults/autodiscovery."
          fi
        fi
        echo "+ npx eslint --max-warnings=0 ${extra_cfg[*]} ${{ inputs.eslint-args }}"
        npx eslint --max-warnings=0 "${extra_cfg[@]}" ${{ inputs.eslint-args }}
